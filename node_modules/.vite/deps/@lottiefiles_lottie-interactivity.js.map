{
  "version": 3,
  "sources": ["../../@lottiefiles/lottie-interactivity/src/lottie-interactivity.js"],
  "sourcesContent": ["const DEFAULT_OPTIONS = {\n  player: 'lottie-player',\n};\nconst LOTTIE_PLAYER_NODE = 'LOTTIE-PLAYER';\nconst ERROR_PREFIX = '[lottieInteractivity]:';\n\n/**\n * LottieFiles interactivity for Lottie\n */\nexport class LottieInteractivity {\n  constructor({ actions, container, mode, player, ...options } = DEFAULT_OPTIONS) {\n    // Save the original player entered by user, used for interaction chaining / loading animations on the fly\n    this.enteredPlayer = player;\n\n    // Resolve lottie instance specified in player option\n    if (!(typeof player === 'object' && player.constructor.name === 'AnimationItem')) {\n      if (typeof player === 'string') {\n        const elem = document.querySelector(player);\n\n        if (elem && elem.nodeName === LOTTIE_PLAYER_NODE) {\n          player = elem.getLottie();\n        }\n      } else if (player instanceof HTMLElement && player.nodeName === LOTTIE_PLAYER_NODE) {\n        player = player.getLottie();\n      }\n\n      // Throw error no player instance has been successfully resolved\n      if (!player) {\n        let message = ERROR_PREFIX + \"Specified player:\" + player + \" is invalid.\";\n\n        throw new Error(message);\n      }\n    }\n\n    // Get the configured container element.\n    if (typeof container === 'string') {\n      container = document.querySelector(container);\n    }\n\n    // Use player wrapper as fallback if container couldn't be resolved.\n    if (!container) {\n      container = player.wrapper;\n    }\n\n    this.player = player;\n    this.loadedAnimation = this.player.path + this.player.fileName + \".json\";\n    this.attachedListeners = false;\n    this.container = container;\n    this.mode = mode;\n    this.actions = actions;\n    this.options = options;\n    this.assignedSegment = null;\n    this.scrolledAndPlayed = false;\n\n    // Interaction chaining\n    this.interactionIdx = 0;\n    this.oldInterctionIdx = 0;\n    this.clickCounter = 0;\n    this.playCounter = 0;\n    this.stateHandler = new Map();\n    this.transitionHandler = new Map();\n  }\n\n  getContainerVisibility() {\n    // Get the bounding box for the lottie player or container\n    const { top, height } = this.container.getBoundingClientRect();\n\n    // Calculate current view percentage\n    const current = window.innerHeight - top;\n    const max = window.innerHeight + height;\n    return current / max;\n  }\n\n  getContainerCursorPosition(cursorX, cursorY) {\n    const { top, left, width, height } = this.container.getBoundingClientRect();\n\n    const x = (cursorX - left) / width;\n    const y = (cursorY - top) / height;\n\n    return { x, y };\n  }\n\n  initScrollMode() {\n    this.player.stop();\n    window.addEventListener('scroll', this.#scrollHandler, true);\n  }\n\n  initCursorMode() {\n    // To have click and hover interaction, force to only have that type and single action\n    // If there are multiple actions, click and hover are ignored\n    if (this.actions &&\n      this.actions.length === 1) {\n      if (this.actions[0].type === \"click\") {\n        this.player.loop = false;\n        this.player.stop();\n        this.container.addEventListener('click', this.#clickHoverHandler);\n      } else if (this.actions[0].type === \"hover\") {\n        this.player.loop = false;\n        this.player.stop();\n        this.container.addEventListener('mouseenter', this.#clickHoverHandler);\n\n        // For mobile\n        this.container.addEventListener('touchstart', this.#clickHoverHandler, { passive: true });\n      } else if (this.actions[0].type === \"toggle\") {\n        this.player.loop = false;\n        this.player.stop();\n        this.container.addEventListener('click', this.#toggleHandler);\n      } else if (this.actions[0].type === \"hold\" || this.actions[0].type === \"pauseHold\") {\n        this.container.addEventListener('mouseenter', this.#holdTransitionEnter);\n        this.container.addEventListener('mouseleave', this.#holdTransitionLeave);\n\n        // For mobile\n        this.container.addEventListener('touchstart', this.#holdTransitionEnter, { passive: true });\n        this.container.addEventListener('touchend', this.#holdTransitionLeave, { passive: true });\n\n      } else if (this.actions[0].type === \"seek\") {\n        this.player.loop = true;\n        this.player.stop();\n        this.container.addEventListener('mousemove', this.#mousemoveHandler);\n        // For mobile\n        this.container.addEventListener('touchmove', this.#touchmoveHandler, { passive: false });\n        this.container.addEventListener('mouseout', this.#mouseoutHandler);\n      }\n    } else {\n      this.player.loop = true;\n      this.player.stop();\n      this.container.addEventListener('mousemove', this.#mousemoveHandler);\n      this.container.addEventListener('mouseleave', this.#mouseoutHandler);\n\n      // Init the animations that set states when the cursor is outside the container, so that they\n      // are visibly idle at the desired frame before first interaction with them\n      this.#cursorHandler(-1, -1);\n    }\n  }\n\n  initChainMode() {\n    this.#initInteractionMaps();\n    this.player.loop = false;\n    this.player.stop();\n    this.#chainedInteractionHandler({ ignorePath: false });\n  }\n\n  start() {\n    if (this.mode === 'scroll') {\n      if (this.player.isLoaded) {\n        this.initScrollMode();\n      } else {\n        this.player.addEventListener('DOMLoaded', () => {\n          this.initScrollMode();\n        });\n      }\n    } else if (this.mode === 'cursor') {\n      if (this.player.isLoaded) {\n        this.initCursorMode();\n      } else {\n        this.player.addEventListener('DOMLoaded', () => {\n          this.initCursorMode();\n        });\n      }\n    } else if (this.mode === 'chain') {\n      // When passing animation object to LI the player is already loaded\n      if (this.player.isLoaded) {\n        this.initChainMode();\n      } else {\n        this.player.addEventListener('DOMLoaded', () => {\n          this.initChainMode();\n        });\n      }\n    }\n  }\n\n  redefineOptions({ actions, container, mode, player, ...options }) {\n    this.stop();\n\n    // Save the original player entered by user, used for interaction chaining / loading animations on the fly\n    this.enteredPlayer = player;\n\n    // Resolve lottie instance specified in player option\n    if (!(typeof player === 'object' && player.constructor.name === 'AnimationItem')) {\n      if (typeof player === 'string') {\n        const elem = document.querySelector(player);\n\n        if (elem && elem.nodeName === LOTTIE_PLAYER_NODE) {\n          player = elem.getLottie();\n        }\n      } else if (player instanceof HTMLElement && player.nodeName === LOTTIE_PLAYER_NODE) {\n        player = player.getLottie();\n      }\n\n      // Throw error no player instance has been successfully resolved\n      if (!player) {\n        let message = ERROR_PREFIX + \"Specified player:\" + player + \" is invalid.\";\n\n        throw new Error(message, player);\n      }\n    }\n\n    // Get the configured container element.\n    if (typeof container === 'string') {\n      container = document.querySelector(container);\n    }\n\n    // Use player wrapper as fallback if container couldn't be resolved.\n    if (!container) {\n      container = player.wrapper;\n    }\n\n    this.player = player;\n    this.loadedAnimation = this.player.path + this.player.fileName + \".json\";\n    this.attachedListeners = false;\n    this.container = container;\n    this.mode = mode;\n    this.actions = actions;\n    this.options = options;\n    this.assignedSegment = null;\n    this.scrolledAndPlayed = false;\n\n    // Interaction chaining\n    this.interactionIdx = 0;\n    this.clickCounter = 0;\n    this.playCounter = 0;\n    this.holdStatus = null;\n    this.stateHandler = new Map();\n    this.transitionHandler = new Map();\n\n    this.start();\n  }\n\n  stop() {\n    if (this.mode === 'scroll') {\n      window.removeEventListener('scroll', this.#scrollHandler, true);\n    }\n\n    if (this.mode === 'cursor') {\n      this.container.removeEventListener('click', this.#clickHoverHandler);\n      this.container.removeEventListener('click', this.#toggleHandler);\n      this.container.removeEventListener('mouseenter', this.#clickHoverHandler);\n      this.container.removeEventListener('touchstart', this.#clickHoverHandler);\n      this.container.removeEventListener('touchmove', this.#touchmoveHandler);\n      this.container.removeEventListener('mousemove', this.#mousemoveHandler);\n      this.container.removeEventListener('mouseleave', this.#mouseoutHandler);\n      this.container.removeEventListener('touchstart', this.#holdTransitionEnter);\n      this.container.removeEventListener('touchend', this.#holdTransitionLeave);\n    }\n\n    if (this.mode === 'chain') {\n      this.container.removeEventListener('click', this.#clickHoverHandler);\n      this.container.removeEventListener('click', this.#clickHoverStateHandler);\n\n      this.container.removeEventListener('mouseenter', this.#clickHoverHandler);\n      this.container.removeEventListener('touchstart', this.#clickHoverHandler);\n      this.container.removeEventListener('touchmove', this.#touchmoveHandler);\n      this.container.removeEventListener('mouseenter', this.#clickHoverStateHandler);\n      this.container.removeEventListener('touchstart', this.#clickHoverStateHandler);\n      this.container.removeEventListener('mouseenter', this.#holdTransitionEnter);\n      this.container.removeEventListener('touchstart', this.#holdTransitionEnter);\n\n      this.container.removeEventListener('mouseleave', this.#holdTransitionLeave);\n      this.container.removeEventListener('mousemove', this.#mousemoveHandler);\n      this.container.removeEventListener('mouseout', this.#mouseoutHandler);\n      this.container.removeEventListener('touchend', this.#holdTransitionLeave);\n\n      if (this.player) {\n        try {\n          this.player.removeEventListener('loopComplete', this.#onCompleteHandler);\n          this.player.removeEventListener('complete', this.#onCompleteHandler);\n          this.player.removeEventListener('enterFrame', this.#cursorSyncHandler);\n          this.player.removeEventListener('enterFrame', this.#holdHandler);\n        } catch (e) {\n          // User deleted the player before calling stop()\n          // Ignore\n        }\n      }\n    }\n    if (this.player) {\n      this.player.destroy();\n      this.player = null;\n    }\n  }\n\n  /**\n   * [chain mode]\n   * Init the state and transitions maps containing all the state and transition methods used for interaction chaining\n   */\n  #initInteractionMaps = () => {\n    if (!this.player)\n      return;\n\n    let loopState = () => {\n      if (this.actions[this.interactionIdx].loop) {\n        this.player.loop = parseInt(this.actions[this.interactionIdx].loop) - 1;\n      } else {\n        this.player.loop = true;\n      }\n      this.player.autoplay = true;\n    }\n    let autoplayState = () => {\n      this.player.loop = false;\n      this.player.autoplay = true;\n    }\n    let clickState = () => {\n      this.player.loop = false;\n      this.player.autoplay = false;\n      this.container.addEventListener('click', this.#clickHoverStateHandler);\n    }\n    let hoverState = () => {\n      this.player.loop = false;\n      this.player.autoplay = false;\n      this.container.addEventListener('mouseenter', this.#clickHoverStateHandler);\n      // For mobile\n      this.container.addEventListener('touchstart', this.#clickHoverStateHandler, { passive: true });\n    }\n    let clickTransition = () => {\n      this.container.addEventListener('click', this.#clickHoverHandler);\n    }\n    let hoverTransition = () => {\n      this.container.addEventListener('mouseenter', this.#clickHoverHandler);\n      // For mobile\n      this.container.addEventListener('touchstart', this.#clickHoverHandler, { passive: true });\n    }\n    let holdTransition = () => {\n      this.player.addEventListener('enterFrame', this.#holdHandler);\n      this.container.addEventListener('mouseenter', this.#holdTransitionEnter);\n      this.container.addEventListener('mouseleave', this.#holdTransitionLeave);\n      // For mobile\n      this.container.addEventListener('touchstart', this.#holdTransitionEnter, { passive: true });\n      this.container.addEventListener('touchend', this.#holdTransitionLeave, { passive: true });\n    }\n    let holdState = () => {\n      this.container.addEventListener('mouseenter', this.#holdTransitionEnter);\n      this.container.addEventListener('mouseleave', this.#holdTransitionLeave);\n      // For mobile\n      this.container.addEventListener('touchstart', this.#holdTransitionEnter, { passive: true });\n      this.container.addEventListener('touchend', this.#holdTransitionLeave, { passive: true });\n    }\n    let repeatTransition = () => {\n      this.player.loop = true;\n      this.player.autoplay = true;\n      let handler = () => { this.#repeatTransition({ handler }) };\n      this.player.addEventListener('loopComplete', handler);\n    }\n    let onCompleteTransition = () => {\n      let state = this.actions[this.interactionIdx].state;\n\n      if (state === 'loop')\n        this.player.addEventListener('loopComplete', this.#onCompleteHandler);\n      else\n        this.player.addEventListener('complete', this.#onCompleteHandler);\n    }\n    let cursorSyncTransition = () => {\n      this.player.stop();\n      this.player.addEventListener('enterFrame', this.#cursorSyncHandler);\n      this.container.addEventListener('mousemove', this.#mousemoveHandler);\n      this.container.addEventListener('touchmove', this.#touchmoveHandler, { passive: false });\n      this.container.addEventListener('mouseout', this.#mouseoutHandler);\n    }\n    this.stateHandler.set('loop', loopState);\n    this.stateHandler.set('autoplay', autoplayState);\n    this.stateHandler.set('click', clickState);\n    this.stateHandler.set('hover', hoverState);\n    this.stateHandler.set('hold', holdState);\n    this.stateHandler.set('pauseHold', holdState);\n\n    this.transitionHandler.set('click', clickTransition);\n    this.transitionHandler.set('hover', hoverTransition);\n    this.transitionHandler.set('hold', holdTransition);\n    this.transitionHandler.set('pauseHold', holdTransition);\n    this.transitionHandler.set('repeat', repeatTransition);\n    this.transitionHandler.set('onComplete', onCompleteTransition);\n    this.transitionHandler.set('seek', cursorSyncTransition);\n  }\n\n  /**\n   * [chain mode]\n   * Handle hover state on chained interactions\n   */\n  #clickHoverStateHandler = () => {\n    let forceFlag = this.actions[this.interactionIdx].forceFlag;\n\n    if (!forceFlag && this.player.isPaused === true) {\n      this.#playSegmentHandler(true);\n    } else if (forceFlag) {\n      this.#playSegmentHandler(true);\n    }\n  }\n\n  // [cursor mode]\n  #toggleHandler = () => {\n    if (this.clickCounter === 0) {\n      this.player.play();\n      this.clickCounter++;\n    } else {\n      this.clickCounter++;\n      this.player.setDirection(this.player.playDirection * -1);\n      this.player.play();\n    }\n  }\n\n  /**\n   * [cursor + chain mode]\n   * Handle click and hover in both cursor and chain mode\n   */\n  #clickHoverHandler = () => {\n    let forceFlag = this.actions[this.interactionIdx].forceFlag;\n    let state = this.actions[this.interactionIdx].state;\n    let transition = this.actions[this.interactionIdx].transition;\n\n    // If we're in chain mode and the click or hover transition is used, otherwise just play the animation\n    if (this.mode === 'chain') {\n      // Check if there is a counter or not and make a transition\n      if (this.actions[this.interactionIdx].count) {\n        let clickLimit = parseInt(this.actions[this.interactionIdx].count);\n        if (this.clickCounter < clickLimit - 1) {\n          this.clickCounter += 1;\n          return;\n        }\n      }\n      // No click counter, so we remove the listeners and got to next interaction\n      this.clickCounter = 0;\n      // Transition when the animation has finished playing\n      if (!forceFlag && (transition === \"click\" && state === \"click\") || (transition === \"hover\" && state === \"hover\"))\n        this.transitionHandler.get(\"onComplete\").call();\n      else\n        this.nextInteraction();\n      this.container.removeEventListener('click', this.#clickHoverHandler);\n      this.container.removeEventListener('mouseenter', this.#clickHoverHandler);\n      return;\n    }\n    // Using goToAndPlay rather than this.#playSegmentHandler(forceFlag) because we're in cursor mode\n    // there for we want to play from the beginning\n    if (!forceFlag && this.player.isPaused === true) {\n      this.player.goToAndPlay(0, true);\n    } else if (forceFlag) {\n      this.player.goToAndPlay(0, true);\n    }\n  }\n\n  // [cursor mode]\n  #mousemoveHandler = e => {\n    this.#cursorHandler(e.clientX, e.clientY);\n  };\n\n  // [cursor mode]\n  #touchmoveHandler = e => {\n    // Allows for syncing on Y axis without scrolling the page\n    if (e.cancelable)\n      e.preventDefault();\n    this.#cursorHandler(e.touches[0].clientX, e.touches[0].clientY);\n  };\n\n  // [cursor mode]\n  #mouseoutHandler = () => {\n    this.#cursorHandler(-1, -1);\n  };\n\n\n  /**\n   * [chain mode]\n   * Handle when a segment of the animation has finished playing\n   */\n  #onCompleteHandler = () => {\n    if (this.actions[this.interactionIdx].state === 'loop') {\n      this.player.removeEventListener('loopComplete', this.#onCompleteHandler);\n    } else {\n      this.player.removeEventListener('complete', this.#onCompleteHandler);\n    }\n    this.nextInteraction();\n  }\n\n  // [chain mode]\n  #repeatTransition = ({ handler }) => {\n    let repeatAmount = 1;\n\n    if (this.actions[this.interactionIdx].repeat)\n      repeatAmount = this.actions[this.interactionIdx].repeat;\n    if (this.playCounter >= repeatAmount - 1) {\n      this.playCounter = 0;\n      this.player.removeEventListener('loopComplete', handler);\n      this.player.loop = false;\n      this.player.autoplay = false;\n      this.nextInteraction();\n    } else {\n      this.playCounter += 1;\n    }\n  }\n\n  /**\n   * [chain mode]\n   * TODO: How does this work with markers? Get marker duration?\n   */\n  #cursorSyncHandler = () => {\n    let frames = this.actions[this.interactionIdx].frames;\n\n    if (frames && this.player.currentFrame >= parseInt(frames[1]) - 1) {\n      this.player.removeEventListener('enterFrame', this.#cursorSyncHandler);\n      this.container.removeEventListener('mousemove', this.#mousemoveHandler);\n      this.container.removeEventListener('mouseout', this.#mouseoutHandler);\n      setTimeout(this.nextInteraction, 0);\n    }\n  }\n\n  /**\n   * [chain mode]\n   * TODO: How does this work with markers? Get marker duration?\n   *\n   * With the hold transition we can't use playSegment so we have to manually verify if\n   * The user held long enough and check if the current frame is within the segment limits\n   *\n   */\n  #holdHandler = () => {\n    let frames = this.actions[this.interactionIdx].frames;\n\n    if ((frames && this.player.currentFrame >= frames[1]) || (this.player.currentFrame >= this.player.totalFrames - 1)) {\n      this.player.removeEventListener('enterFrame', this.#holdHandler);\n      this.container.removeEventListener('mouseenter', this.#holdTransitionEnter);\n      this.container.removeEventListener('mouseleave', this.#holdTransitionLeave);\n      // For mobile\n      this.container.removeEventListener('touchstart', this.#holdTransitionEnter, { passive: true });\n      this.container.removeEventListener('touchend', this.#holdTransitionLeave, { passive: true });\n      this.player.pause();\n\n      this.holdStatus = false;\n      this.nextInteraction();\n    }\n    // Pause player so that reverse playback doesn't leave the set frame boundries\n    if (this.player.playDirection === -1 && frames && this.player.currentFrame < frames[0]) {\n      this.player.pause();\n    }\n  }\n\n  // [cursor + chain mode]\n  #holdTransitionEnter = () => {\n    // On first cursor enter needs check\n    if (this.player.playDirection === -1 || this.holdStatus === null || !this.holdStatus) {\n      this.player.setDirection(1);\n      this.player.play();\n      this.holdStatus = true;\n    }\n  }\n\n  // [cursor + chain mode]\n  #holdTransitionLeave = () => {\n    if (this.actions[this.interactionIdx].transition === \"hold\" ||\n      this.actions[this.interactionIdx].state === \"hold\" ||\n      this.actions[0].type === \"hold\") {\n      this.player.setDirection(-1);\n      this.player.play();\n    } else if (this.actions[this.interactionIdx].transition === \"pauseHold\" ||\n      this.actions[this.interactionIdx].state === \"pauseHold\" ||\n      this.actions[0].type === \"pauseHold\") {\n      this.player.pause();\n    }\n    this.holdStatus = false;\n  }\n\n  // [chain mode]\n  #clearStateListeners = () => {\n    this.container.removeEventListener('click', this.#clickHoverHandler);\n    this.container.removeEventListener('click', this.#clickHoverStateHandler);\n\n    this.container.removeEventListener('mouseenter', this.#clickHoverHandler);\n    this.container.removeEventListener('touchstart', this.#clickHoverHandler);\n    this.container.removeEventListener('touchmove', this.#touchmoveHandler);\n    this.container.removeEventListener('mouseenter', this.#clickHoverStateHandler);\n    this.container.removeEventListener('touchstart', this.#clickHoverStateHandler);\n    this.container.removeEventListener('mouseenter', this.#holdTransitionEnter);\n    this.container.removeEventListener('touchstart', this.#holdTransitionEnter);\n\n    this.container.removeEventListener('mouseleave', this.#holdTransitionLeave);\n    this.container.removeEventListener('mousemove', this.#mousemoveHandler);\n    this.container.removeEventListener('mouseout', this.#mouseoutHandler);\n    this.container.removeEventListener('touchend', this.#holdTransitionLeave);\n\n    if (this.player) {\n      try {\n        this.player.removeEventListener('loopComplete', this.#onCompleteHandler);\n        this.player.removeEventListener('complete', this.#onCompleteHandler);\n        this.player.removeEventListener('enterFrame', this.#cursorSyncHandler);\n        this.player.removeEventListener('enterFrame', this.#holdHandler);\n      } catch (e) {\n        // User deleted the player before calling stop()\n        // Ignore\n      }\n    }\n  }\n\n  jumpToInteraction = (index) => {\n    this.#clearStateListeners();\n    this.interactionIdx = index;\n    this.interactionIdx < 0 ? this.interactionIdx = 0 : this.interactionIdx;\n    this.nextInteraction(false);\n  }\n\n  // [chain mode]\n  nextInteraction = (incrementIndex = true) => {\n    this.oldInterctionIdx = this.interactionIdx;\n    // If state is hover or click we need to remove listeners\n    this.#clearStateListeners();\n    this.player.loop = false;\n\n    // Check if theres a jump-to before incrementing\n    let jumpToIndex = this.actions[this.interactionIdx].jumpTo;\n    if (jumpToIndex) {\n      // If jumpToIndex is inside action length jump to it otherwise go to first action\n      if (jumpToIndex >= 0 && jumpToIndex < this.actions.length) {\n        this.interactionIdx = jumpToIndex;\n        this.#chainedInteractionHandler({ ignorePath: false });\n      } else {\n        this.interactionIdx = 0;\n        this.player.goToAndStop(0, true);\n        this.#chainedInteractionHandler({ ignorePath: false });\n      }\n    } else {\n      // Go to next interaction\n      if (incrementIndex)\n        this.interactionIdx++;\n      if (this.interactionIdx >= this.actions.length) {\n        // Go back to the first interaction\n        if (this.actions[this.actions.length - 1].reset) {\n          this.interactionIdx = 0;\n          this.player.resetSegments(true);\n          if (this.actions[this.interactionIdx].frames)\n            this.player.goToAndStop(this.actions[this.interactionIdx].frames, true);\n          else\n            this.player.goToAndStop(0, true);\n          this.#chainedInteractionHandler({ ignorePath: false });\n        }\n        else {\n          this.interactionIdx = this.actions.length - 1;\n          this.#chainedInteractionHandler({ ignorePath: false });\n        }\n      } else {\n        this.#chainedInteractionHandler({ ignorePath: false });\n      }\n    }\n\n    // Emit event from the lottie-player element\n    this.container.dispatchEvent(new CustomEvent(\"transition\", {\n      bubbles: true,\n      composed: true,\n      detail: { oldIndex: this.oldInterctionIdx, newIndex: this.interactionIdx }\n    }));\n  }\n\n  /**\n   * [chain mode]\n   * Checks if frames are an array or string, and calls appropriate method to play animation\n   */\n  #playSegmentHandler = (forceFlag) => {\n    let frames = this.actions[this.interactionIdx].frames;\n\n    //If no frame segment is defined, play the whole animation\n    if (!frames) {\n      this.player.resetSegments(true);\n      this.player.goToAndPlay(0, true);\n      return;\n    }\n    // If using named markers\n    if (typeof frames === 'string') {\n      this.player.goToAndPlay(frames, forceFlag);\n    } else {\n      this.player.playSegments(frames, forceFlag);\n    }\n  }\n\n  /**\n   * [chain mode]\n   * Load a new animation using the path defined in the current interaction\n   */\n  #loadAnimationInChain = () => {\n    let path = this.actions[this.interactionIdx].path;\n\n    // The animation path declared on the lottie-player was saved in the constructor under 'enteredPlayer'\n    // We assume that the path on the lottie-player element is the animation to use in the first action\n    if (!path) {\n      // If we passed animationData to Lottie-Interactivity, load the animation data otherwise use the path\n      if (typeof this.enteredPlayer === 'object' && this.enteredPlayer.constructor.name === 'AnimationItem') {\n        path = this.enteredPlayer;\n\n        if (this.player === path) {\n          this.#chainedInteractionHandler({ ignorePath: true });\n          return;\n        }\n      } else {\n        path = this.loadedAnimation;\n        let fileName = path.substr(path.lastIndexOf('/') + 1);\n        fileName = fileName.substr(0, fileName.lastIndexOf('.json'));\n\n        // Prevents reloading animation the same animation\n        if (this.player.fileName === fileName) {\n          this.#chainedInteractionHandler({ ignorePath: true });\n          return;\n        }\n      }\n    }\n\n    // Force width and height on the container to retain its size while the next animation is being loaded\n    let lottieContainerSize = this.container.getBoundingClientRect();\n    let newContainerStyle = \"width: \" + lottieContainerSize.width + \"px !important; height: \" +\n      lottieContainerSize.height + \"px !important; background: \" + this.container.style.background;\n    this.container.setAttribute('style', newContainerStyle);\n\n    if (!(typeof this.enteredPlayer === 'object' && this.enteredPlayer.constructor.name === 'AnimationItem')) {\n      if (typeof this.enteredPlayer === 'string') {\n        const elem = document.querySelector(this.enteredPlayer);\n\n        if (elem && elem.nodeName === LOTTIE_PLAYER_NODE) {\n          // Prevents adding the listeners multiple times if multiple animations are needed to be loaded from actions\n          if (!this.attachedListeners) {\n            // Remove the styling that prevents flickering\n            elem.addEventListener(\"ready\", () => {\n              this.container.style.width = '';\n              this.container.style.height = '';\n            });\n            elem.addEventListener(\"load\", () => {\n              this.player = elem.getLottie();\n              this.#chainedInteractionHandler({ ignorePath: true });\n            });\n            this.attachedListeners = true;\n          }\n          // The LottieFiles player destroys the animation when a new one is Loaded\n          elem.load(path);\n        }\n      } else if (this.enteredPlayer instanceof HTMLElement && this.enteredPlayer.nodeName === LOTTIE_PLAYER_NODE) {\n        // Prevents adding the listeners multiple times if multiple animations are needed to be loaded from actions\n        if (!this.attachedListeners) {\n          // Remove the styling that prevents flickering\n          this.enteredPlayer.addEventListener(\"ready\", () => {\n            this.container.style.width = '';\n            this.container.style.height = '';\n          });\n          this.enteredPlayer.addEventListener(\"load\", () => {\n            this.player = this.enteredPlayer.getLottie();\n            this.#chainedInteractionHandler({ ignorePath: true });\n          });\n          this.attachedListeners = true;\n        }\n        // The LottieFiles player destroys the animation when a new one is Loaded\n        this.enteredPlayer.load(path);\n      }\n      // Throw error no player instance has been successfully resolved\n      if (!this.player) {\n        throw new Error(`${ERROR_PREFIX} Specified player is invalid.`, this.enteredPlayer);\n      }\n    } else {\n      if (window.lottie) {\n        this.stop();\n        // Removes svg animation contained inside\n        this.container.innerHTML = \"\";\n\n        if (typeof path === 'object' && path.constructor.name === 'AnimationItem') {\n          this.player = window.lottie.loadAnimation({\n            loop: false,\n            autoplay: false,\n            animationData: path.animationData,\n            container: this.container\n          });\n        }\n        else {\n          this.player = window.lottie.loadAnimation({\n            loop: false,\n            autoplay: false,\n            path,\n            container: this.container\n          });\n        }\n\n        this.player.addEventListener('DOMLoaded', () => {\n          // Remove the styling that prevents flickering\n          this.container.style.width = '';\n          this.container.style.height = '';\n          this.#chainedInteractionHandler({ ignorePath: true });\n        });\n      } else {\n        throw new Error(`${ERROR_PREFIX} A Lottie player is required.`);\n      }\n    }\n    // Reset counters\n    this.clickCounter = 0;\n    this.playCounter = 0;\n  }\n\n  /**\n   * [chain mode]\n   * Check the action object at the current interaction index and set the needed interaction listeners as well\n   * as any extra options\n   */\n  #chainedInteractionHandler = ({ ignorePath }) => {\n    let frames = this.actions[this.interactionIdx].frames;\n    let state = this.actions[this.interactionIdx].state;\n    let transition = this.actions[this.interactionIdx].transition;\n    let path = this.actions[this.interactionIdx].path;\n    let stateFunction = this.stateHandler.get(state);\n    let transitionFunction = this.transitionHandler.get(transition);\n    let speed = this.actions[this.interactionIdx].speed ? this.actions[this.interactionIdx].speed : 1;\n    let delay = this.actions[this.interactionIdx].delay ? this.actions[this.interactionIdx].delay : 0;\n\n    // Check if path is detected or that we are at the beginning again and reset\n    // If we are back at the first action, we need to reload the animation declared on the lottie-player element\n    if (!ignorePath && (path || (this.actions[this.actions.length - 1].reset && this.interactionIdx === 0))) {\n      this.#loadAnimationInChain();\n      return;\n    }\n    setTimeout(() => {\n      if (frames) {\n        this.player.autoplay = false;\n        this.player.resetSegments(true);\n        this.player.goToAndStop(frames[0], true);\n      }\n      if (stateFunction) {\n        stateFunction.call();\n      } else if (state === \"none\") {\n        this.player.loop = false;\n        this.player.autoplay = false;\n      }\n      if (transitionFunction) {\n        transitionFunction.call();\n      }\n      if (this.player.autoplay) {\n        this.player.resetSegments(true);\n        this.#playSegmentHandler(true);\n      }\n      this.player.setSpeed(speed);\n    }, delay);\n  }\n\n  // [cursor mode]\n  #cursorHandler = (x, y) => {\n    // Resolve cursor position if cursor is inside container\n    if (x !== -1 && y !== -1) {\n      // Get container cursor position\n      const pos = this.getContainerCursorPosition(x, y);\n\n      // Use the resolved position\n      x = pos.x;\n      y = pos.y;\n    }\n\n    // Find the first action that satisfies the current position conditions\n    const action = this.actions.find(({ position }) => {\n      if (position) {\n        if (Array.isArray(position.x) && Array.isArray(position.y)) {\n          return x >= position.x[0] && x <= position.x[1] && y >= position.y[0] && y <= position.y[1];\n        } else if (!Number.isNaN(position.x) && !Number.isNaN(position.y)) {\n          return x === position.x && y === position.y;\n        }\n      }\n\n      return false;\n    });\n\n    // Skip if no matching action was found!\n    if (!action) {\n      return;\n    }\n\n    // Process action types:\n    if (action.type === 'seek' || action.transition === 'seek') {\n      // Seek: Go to a frame based on player scroll position action\n      const xPercent = (x - action.position.x[0]) / (action.position.x[1] - action.position.x[0]);\n      const yPercent = (y - action.position.y[0]) / (action.position.y[1] - action.position.y[0]);\n\n      this.player.playSegments(action.frames, true);\n\n      if (action.position.y[0] < 0 && action.position.y[1] > 1) {\n        this.player.goToAndStop(Math.floor(xPercent * this.player.totalFrames), true);\n      } else {\n        this.player.goToAndStop(Math.ceil(((xPercent + yPercent) / 2) * this.player.totalFrames), true);\n      }\n    } else if (action.type === 'loop') {\n      this.player.playSegments(action.frames, true);\n    } else if (action.type === 'play') {\n      // Play: Reset segments and continue playing full animation from current position\n      if (this.player.isPaused === true) {\n        this.player.resetSegments();\n      }\n      this.player.playSegments(action.frames);\n    } else if (action.type === 'stop') {\n      this.player.resetSegments(true);\n      // Stop: Stop playback\n      this.player.goToAndStop(action.frames[0], true);\n    }\n  };\n\n  // [scroll mode]\n  #scrollHandler = () => {\n    // Get container visibility percentage\n    const currentPercent = this.getContainerVisibility();\n\n    // Find the first action that satisfies the current position conditions\n    const action = this.actions.find(\n      ({ visibility }) => currentPercent >= visibility[0] && currentPercent <= visibility[1],\n    );\n\n    // Skip if no matching action was found!\n    if (!action) {\n      return;\n    }\n\n    // Process action types:\n    if (action.type === 'seek') {\n      // Seek: Go to a frame based on player scroll position action\n      const start = action.frames[0];\n      const end = action.frames.length == 2 ? action.frames[1] : (this.player.totalFrames - 1);\n\n      // Use global frame reference for frames within the seek section.\n      // Without this, if you follow a seek with a loop and then scroll back up,\n      // it will treat frame numbers as relative to the loop.\n      if (this.assignedSegment !== null) {\n        this.player.resetSegments(true);\n        this.assignedSegment = null;\n      }\n\n      this.player.goToAndStop(\n        start + Math.round(\n          ((currentPercent - action.visibility[0]) / (action.visibility[1] - action.visibility[0])) *\n          (end - start)\n        ),\n        true,\n      );\n    } else if (action.type === 'loop') {\n      this.player.loop = true;\n      // Loop: Loop a given frames\n      if (this.assignedSegment === null) {\n        // if not playing any segments currently. play those segments and save to state\n        this.player.playSegments(action.frames, true);\n        this.assignedSegment = action.frames;\n      } else {\n        // if playing any segments currently.\n        //check if segments in state are equal to the frames selected by action\n        if (this.assignedSegment !== action.frames) {\n          // if they are not equal. new segments are to be loaded\n          this.player.playSegments(action.frames, true);\n          this.assignedSegment = action.frames;\n        } else {\n          // if they are equal the play method must be called only if lottie is paused\n          if (this.player.isPaused === true) {\n            this.player.playSegments(action.frames, true);\n            this.assignedSegment = action.frames;\n          }\n        }\n      }\n    } else if (action.type === 'play' || action.type === 'playOnce') {\n      // Play: Reset segments and continue playing full animation from current position\n      if (action.type === 'playOnce' && !this.scrolledAndPlayed) {\n        this.scrolledAndPlayed = true;\n        this.player.resetSegments(true);\n        if (action.frames) {\n          this.player.playSegments(action.frames, true);\n        } else {\n          this.player.play();\n        }\n        return;\n      } else if (action.type === 'play' && this.player.isPaused) {\n        this.player.resetSegments(true);\n        if (action.frames) {\n          this.player.playSegments(action.frames, true);\n        } else {\n          this.player.play();\n        }\n      }\n    } else if (action.type === 'stop') {\n      // Stop: Stop playback\n      this.player.goToAndStop(action.frames[0], true);\n    }\n  };\n}\n\nexport const create = options => {\n  const instance = new LottieInteractivity(options);\n  instance.start();\n\n  return instance;\n};\n\nexport default create;\n"],
  "mappings": "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",
  "names": ["DEFAULT_OPTIONS", "player", "ERROR_PREFIX", "LottieInteractivity", "actions", "container", "mode", "options", "_this", "holdTransition", "addEventListener", "passive", "holdState", "stateHandler", "set", "interactionIdx", "loop", "parseInt", "autoplay", "transitionHandler", "handler", "state", "stop", "forceFlag", "isPaused", "clickCounter", "play", "setDirection", "playDirection", "transition", "count", "clickLimit", "get", "call", "nextInteraction", "removeEventListener", "goToAndPlay", "e", "clientX", "clientY", "cancelable", "preventDefault", "touches", "repeatAmount", "repeat", "playCounter", "frames", "currentFrame", "setTimeout", "totalFrames", "pause", "holdStatus", "type", "index", "incrementIndex", "oldInterctionIdx", "jumpToIndex", "jumpTo", "length", "ignorePath", "goToAndStop", "reset", "resetSegments", "dispatchEvent", "CustomEvent", "bubbles", "composed", "detail", "oldIndex", "newIndex", "playSegments", "path", "_typeof", "enteredPlayer", "constructor", "name", "fileName", "loadedAnimation", "substr", "lastIndexOf", "lottieContainerSize", "getBoundingClientRect", "newContainerStyle", "width", "height", "style", "background", "setAttribute", "elem", "document", "querySelector", "nodeName", "attachedListeners", "getLottie", "load", "HTMLElement", "Error", "window", "lottie", "innerHTML", "loadAnimation", "animationData", "stateFunction", "transitionFunction", "speed", "delay", "setSpeed", "x", "y", "pos", "getContainerCursorPosition", "action", "find", "n", "position", "Array", "isArray", "Number", "isNaN", "xPercent", "yPercent", "Math", "floor", "ceil", "currentPercent", "getContainerVisibility", "t", "visibility", "start", "end", "assignedSegment", "round", "scrolledAndPlayed", "message", "wrapper", "this", "Map", "top", "innerHeight", "cursorX", "cursorY", "left", "isLoaded", "initScrollMode", "_this2", "initCursorMode", "initChainMode", "destroy", "M", "l", "create", "instance"]
}
