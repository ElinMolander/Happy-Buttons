import "./chunk-ROME4SDB.js";

// node_modules/@lottiefiles/lottie-interactivity/dist/lottie-interactivity.es.js
function e(t2) {
  return (e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
    return typeof e2;
  } : function(e2) {
    return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
  })(t2);
}
function t(e2, t2) {
  if (!(e2 instanceof t2))
    throw new TypeError("Cannot call a class as a function");
}
function n(e2, t2) {
  for (var n2 = 0; n2 < t2.length; n2++) {
    var i2 = t2[n2];
    i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(e2, i2.key, i2);
  }
}
function i(e2, t2, n2) {
  return t2 in e2 ? Object.defineProperty(e2, t2, { value: n2, enumerable: true, configurable: true, writable: true }) : e2[t2] = n2, e2;
}
function a(e2, t2) {
  if (null == e2)
    return {};
  var n2, i2, a2 = function(e3, t3) {
    if (null == e3)
      return {};
    var n3, i3, a3 = {}, r3 = Object.keys(e3);
    for (i3 = 0; i3 < r3.length; i3++)
      n3 = r3[i3], t3.indexOf(n3) >= 0 || (a3[n3] = e3[n3]);
    return a3;
  }(e2, t2);
  if (Object.getOwnPropertySymbols) {
    var r2 = Object.getOwnPropertySymbols(e2);
    for (i2 = 0; i2 < r2.length; i2++)
      n2 = r2[i2], t2.indexOf(n2) >= 0 || Object.prototype.propertyIsEnumerable.call(e2, n2) && (a2[n2] = e2[n2]);
  }
  return a2;
}
function r(e2, t2) {
  var n2 = t2.get(e2);
  if (!n2)
    throw new TypeError("attempted to get private field on non-instance");
  return n2.get ? n2.get.call(e2) : n2.value;
}
var o = { player: "lottie-player" };
var s = "[lottieInteractivity]:";
var l = function() {
  function l2() {
    var n2 = this, M3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : o, C2 = M3.actions, A2 = M3.container, T = M3.mode, H = M3.player, O = a(M3, ["actions", "container", "mode", "player"]);
    if (t(this, l2), c.set(this, { writable: true, value: function() {
      if (n2.player) {
        var e2 = function() {
          n2.player.addEventListener("enterFrame", r(n2, E)), n2.container.addEventListener("mouseenter", r(n2, g)), n2.container.addEventListener("mouseleave", r(n2, w)), n2.container.addEventListener("touchstart", r(n2, g), { passive: true }), n2.container.addEventListener("touchend", r(n2, w), { passive: true });
        }, t2 = function() {
          n2.container.addEventListener("mouseenter", r(n2, g)), n2.container.addEventListener("mouseleave", r(n2, w)), n2.container.addEventListener("touchstart", r(n2, g), { passive: true }), n2.container.addEventListener("touchend", r(n2, w), { passive: true });
        };
        n2.stateHandler.set("loop", function() {
          n2.actions[n2.interactionIdx].loop ? n2.player.loop = parseInt(n2.actions[n2.interactionIdx].loop) - 1 : n2.player.loop = true, n2.player.autoplay = true;
        }), n2.stateHandler.set("autoplay", function() {
          n2.player.loop = false, n2.player.autoplay = true;
        }), n2.stateHandler.set("click", function() {
          n2.player.loop = false, n2.player.autoplay = false, n2.container.addEventListener("click", r(n2, p));
        }), n2.stateHandler.set("hover", function() {
          n2.player.loop = false, n2.player.autoplay = false, n2.container.addEventListener("mouseenter", r(n2, p)), n2.container.addEventListener("touchstart", r(n2, p), { passive: true });
        }), n2.stateHandler.set("hold", t2), n2.stateHandler.set("pauseHold", t2), n2.transitionHandler.set("click", function() {
          n2.container.addEventListener("click", r(n2, h));
        }), n2.transitionHandler.set("hover", function() {
          n2.container.addEventListener("mouseenter", r(n2, h)), n2.container.addEventListener("touchstart", r(n2, h), { passive: true });
        }), n2.transitionHandler.set("hold", e2), n2.transitionHandler.set("pauseHold", e2), n2.transitionHandler.set("repeat", function() {
          n2.player.loop = true, n2.player.autoplay = true;
          n2.player.addEventListener("loopComplete", function e3() {
            r(n2, f).call(n2, { handler: e3 });
          });
        }), n2.transitionHandler.set("onComplete", function() {
          "loop" === n2.actions[n2.interactionIdx].state ? n2.player.addEventListener("loopComplete", r(n2, m)) : n2.player.addEventListener("complete", r(n2, m));
        }), n2.transitionHandler.set("seek", function() {
          n2.player.stop(), n2.player.addEventListener("enterFrame", r(n2, L)), n2.container.addEventListener("mousemove", r(n2, y)), n2.container.addEventListener("touchmove", r(n2, u), { passive: false }), n2.container.addEventListener("mouseout", r(n2, v));
        });
      }
    } }), p.set(this, { writable: true, value: function() {
      var e2 = n2.actions[n2.interactionIdx].forceFlag;
      e2 || true !== n2.player.isPaused ? e2 && r(n2, x).call(n2, true) : r(n2, x).call(n2, true);
    } }), d.set(this, { writable: true, value: function() {
      0 === n2.clickCounter ? (n2.player.play(), n2.clickCounter++) : (n2.clickCounter++, n2.player.setDirection(-1 * n2.player.playDirection), n2.player.play());
    } }), h.set(this, { writable: true, value: function() {
      var e2 = n2.actions[n2.interactionIdx].forceFlag, t2 = n2.actions[n2.interactionIdx].state, i2 = n2.actions[n2.interactionIdx].transition;
      if ("chain" === n2.mode) {
        if (n2.actions[n2.interactionIdx].count) {
          var a2 = parseInt(n2.actions[n2.interactionIdx].count);
          if (n2.clickCounter < a2 - 1)
            return void (n2.clickCounter += 1);
        }
        return n2.clickCounter = 0, !e2 && "click" === i2 && "click" === t2 || "hover" === i2 && "hover" === t2 ? n2.transitionHandler.get("onComplete").call() : n2.nextInteraction(), n2.container.removeEventListener("click", r(n2, h)), void n2.container.removeEventListener("mouseenter", r(n2, h));
      }
      e2 || true !== n2.player.isPaused ? e2 && n2.player.goToAndPlay(0, true) : n2.player.goToAndPlay(0, true);
    } }), y.set(this, { writable: true, value: function(e2) {
      r(n2, S).call(n2, e2.clientX, e2.clientY);
    } }), u.set(this, { writable: true, value: function(e2) {
      e2.cancelable && e2.preventDefault(), r(n2, S).call(n2, e2.touches[0].clientX, e2.touches[0].clientY);
    } }), v.set(this, { writable: true, value: function() {
      r(n2, S).call(n2, -1, -1);
    } }), m.set(this, { writable: true, value: function() {
      "loop" === n2.actions[n2.interactionIdx].state ? n2.player.removeEventListener("loopComplete", r(n2, m)) : n2.player.removeEventListener("complete", r(n2, m)), n2.nextInteraction();
    } }), f.set(this, { writable: true, value: function(e2) {
      var t2 = e2.handler, i2 = 1;
      n2.actions[n2.interactionIdx].repeat && (i2 = n2.actions[n2.interactionIdx].repeat), n2.playCounter >= i2 - 1 ? (n2.playCounter = 0, n2.player.removeEventListener("loopComplete", t2), n2.player.loop = false, n2.player.autoplay = false, n2.nextInteraction()) : n2.playCounter += 1;
    } }), L.set(this, { writable: true, value: function() {
      var e2 = n2.actions[n2.interactionIdx].frames;
      e2 && n2.player.currentFrame >= parseInt(e2[1]) - 1 && (n2.player.removeEventListener("enterFrame", r(n2, L)), n2.container.removeEventListener("mousemove", r(n2, y)), n2.container.removeEventListener("mouseout", r(n2, v)), setTimeout(n2.nextInteraction, 0));
    } }), E.set(this, { writable: true, value: function() {
      var e2 = n2.actions[n2.interactionIdx].frames;
      (e2 && n2.player.currentFrame >= e2[1] || n2.player.currentFrame >= n2.player.totalFrames - 1) && (n2.player.removeEventListener("enterFrame", r(n2, E)), n2.container.removeEventListener("mouseenter", r(n2, g)), n2.container.removeEventListener("mouseleave", r(n2, w)), n2.container.removeEventListener("touchstart", r(n2, g), { passive: true }), n2.container.removeEventListener("touchend", r(n2, w), { passive: true }), n2.player.pause(), n2.holdStatus = false, n2.nextInteraction()), -1 === n2.player.playDirection && e2 && n2.player.currentFrame < e2[0] && n2.player.pause();
    } }), g.set(this, { writable: true, value: function() {
      -1 !== n2.player.playDirection && null !== n2.holdStatus && n2.holdStatus || (n2.player.setDirection(1), n2.player.play(), n2.holdStatus = true);
    } }), w.set(this, { writable: true, value: function() {
      "hold" === n2.actions[n2.interactionIdx].transition || "hold" === n2.actions[n2.interactionIdx].state || "hold" === n2.actions[0].type ? (n2.player.setDirection(-1), n2.player.play()) : "pauseHold" !== n2.actions[n2.interactionIdx].transition && "pauseHold" !== n2.actions[n2.interactionIdx].state && "pauseHold" !== n2.actions[0].type || n2.player.pause(), n2.holdStatus = false;
    } }), I.set(this, { writable: true, value: function() {
      if (n2.container.removeEventListener("click", r(n2, h)), n2.container.removeEventListener("click", r(n2, p)), n2.container.removeEventListener("mouseenter", r(n2, h)), n2.container.removeEventListener("touchstart", r(n2, h)), n2.container.removeEventListener("touchmove", r(n2, u)), n2.container.removeEventListener("mouseenter", r(n2, p)), n2.container.removeEventListener("touchstart", r(n2, p)), n2.container.removeEventListener("mouseenter", r(n2, g)), n2.container.removeEventListener("touchstart", r(n2, g)), n2.container.removeEventListener("mouseleave", r(n2, w)), n2.container.removeEventListener("mousemove", r(n2, y)), n2.container.removeEventListener("mouseout", r(n2, v)), n2.container.removeEventListener("touchend", r(n2, w)), n2.player)
        try {
          n2.player.removeEventListener("loopComplete", r(n2, m)), n2.player.removeEventListener("complete", r(n2, m)), n2.player.removeEventListener("enterFrame", r(n2, L)), n2.player.removeEventListener("enterFrame", r(n2, E));
        } catch (e2) {
        }
    } }), i(this, "jumpToInteraction", function(e2) {
      r(n2, I).call(n2), n2.interactionIdx = e2, n2.interactionIdx < 0 ? n2.interactionIdx = 0 : n2.interactionIdx, n2.nextInteraction(false);
    }), i(this, "nextInteraction", function() {
      var e2 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
      n2.oldInterctionIdx = n2.interactionIdx, r(n2, I).call(n2), n2.player.loop = false;
      var t2 = n2.actions[n2.interactionIdx].jumpTo;
      t2 ? t2 >= 0 && t2 < n2.actions.length ? (n2.interactionIdx = t2, r(n2, k).call(n2, { ignorePath: false })) : (n2.interactionIdx = 0, n2.player.goToAndStop(0, true), r(n2, k).call(n2, { ignorePath: false })) : (e2 && n2.interactionIdx++, n2.interactionIdx >= n2.actions.length ? n2.actions[n2.actions.length - 1].reset ? (n2.interactionIdx = 0, n2.player.resetSegments(true), n2.actions[n2.interactionIdx].frames ? n2.player.goToAndStop(n2.actions[n2.interactionIdx].frames, true) : n2.player.goToAndStop(0, true), r(n2, k).call(n2, { ignorePath: false })) : (n2.interactionIdx = n2.actions.length - 1, r(n2, k).call(n2, { ignorePath: false })) : r(n2, k).call(n2, { ignorePath: false })), n2.container.dispatchEvent(new CustomEvent("transition", { bubbles: true, composed: true, detail: { oldIndex: n2.oldInterctionIdx, newIndex: n2.interactionIdx } }));
    }), x.set(this, { writable: true, value: function(e2) {
      var t2 = n2.actions[n2.interactionIdx].frames;
      if (!t2)
        return n2.player.resetSegments(true), void n2.player.goToAndPlay(0, true);
      "string" == typeof t2 ? n2.player.goToAndPlay(t2, e2) : n2.player.playSegments(t2, e2);
    } }), b.set(this, { writable: true, value: function() {
      var t2 = n2.actions[n2.interactionIdx].path;
      if (!t2)
        if ("object" === e(n2.enteredPlayer) && "AnimationItem" === n2.enteredPlayer.constructor.name) {
          if (t2 = n2.enteredPlayer, n2.player === t2)
            return void r(n2, k).call(n2, { ignorePath: true });
        } else {
          var i2 = (t2 = n2.loadedAnimation).substr(t2.lastIndexOf("/") + 1);
          if (i2 = i2.substr(0, i2.lastIndexOf(".json")), n2.player.fileName === i2)
            return void r(n2, k).call(n2, { ignorePath: true });
        }
      var a2 = n2.container.getBoundingClientRect(), o2 = "width: " + a2.width + "px !important; height: " + a2.height + "px !important; background: " + n2.container.style.background;
      if (n2.container.setAttribute("style", o2), "object" !== e(n2.enteredPlayer) || "AnimationItem" !== n2.enteredPlayer.constructor.name) {
        if ("string" == typeof n2.enteredPlayer) {
          var l3 = document.querySelector(n2.enteredPlayer);
          l3 && "LOTTIE-PLAYER" === l3.nodeName && (n2.attachedListeners || (l3.addEventListener("ready", function() {
            n2.container.style.width = "", n2.container.style.height = "";
          }), l3.addEventListener("load", function() {
            n2.player = l3.getLottie(), r(n2, k).call(n2, { ignorePath: true });
          }), n2.attachedListeners = true), l3.load(t2));
        } else
          n2.enteredPlayer instanceof HTMLElement && "LOTTIE-PLAYER" === n2.enteredPlayer.nodeName && (n2.attachedListeners || (n2.enteredPlayer.addEventListener("ready", function() {
            n2.container.style.width = "", n2.container.style.height = "";
          }), n2.enteredPlayer.addEventListener("load", function() {
            n2.player = n2.enteredPlayer.getLottie(), r(n2, k).call(n2, { ignorePath: true });
          }), n2.attachedListeners = true), n2.enteredPlayer.load(t2));
        if (!n2.player)
          throw new Error("".concat(s, " Specified player is invalid."), n2.enteredPlayer);
      } else {
        if (!window.lottie)
          throw new Error("".concat(s, " A Lottie player is required."));
        n2.stop(), n2.container.innerHTML = "", "object" === e(t2) && "AnimationItem" === t2.constructor.name ? n2.player = window.lottie.loadAnimation({ loop: false, autoplay: false, animationData: t2.animationData, container: n2.container }) : n2.player = window.lottie.loadAnimation({ loop: false, autoplay: false, path: t2, container: n2.container }), n2.player.addEventListener("DOMLoaded", function() {
          n2.container.style.width = "", n2.container.style.height = "", r(n2, k).call(n2, { ignorePath: true });
        });
      }
      n2.clickCounter = 0, n2.playCounter = 0;
    } }), k.set(this, { writable: true, value: function(e2) {
      var t2 = e2.ignorePath, i2 = n2.actions[n2.interactionIdx].frames, a2 = n2.actions[n2.interactionIdx].state, o2 = n2.actions[n2.interactionIdx].transition, s2 = n2.actions[n2.interactionIdx].path, l3 = n2.stateHandler.get(a2), c2 = n2.transitionHandler.get(o2), p2 = n2.actions[n2.interactionIdx].speed ? n2.actions[n2.interactionIdx].speed : 1, d2 = n2.actions[n2.interactionIdx].delay ? n2.actions[n2.interactionIdx].delay : 0;
      t2 || !(s2 || n2.actions[n2.actions.length - 1].reset && 0 === n2.interactionIdx) ? setTimeout(function() {
        i2 && (n2.player.autoplay = false, n2.player.resetSegments(true), n2.player.goToAndStop(i2[0], true)), l3 ? l3.call() : "none" === a2 && (n2.player.loop = false, n2.player.autoplay = false), c2 && c2.call(), n2.player.autoplay && (n2.player.resetSegments(true), r(n2, x).call(n2, true)), n2.player.setSpeed(p2);
      }, d2) : r(n2, b).call(n2);
    } }), S.set(this, { writable: true, value: function(e2, t2) {
      if (-1 !== e2 && -1 !== t2) {
        var i2 = n2.getContainerCursorPosition(e2, t2);
        e2 = i2.x, t2 = i2.y;
      }
      var a2 = n2.actions.find(function(n3) {
        var i3 = n3.position;
        if (i3) {
          if (Array.isArray(i3.x) && Array.isArray(i3.y))
            return e2 >= i3.x[0] && e2 <= i3.x[1] && t2 >= i3.y[0] && t2 <= i3.y[1];
          if (!Number.isNaN(i3.x) && !Number.isNaN(i3.y))
            return e2 === i3.x && t2 === i3.y;
        }
        return false;
      });
      if (a2)
        if ("seek" === a2.type || "seek" === a2.transition) {
          var r2 = (e2 - a2.position.x[0]) / (a2.position.x[1] - a2.position.x[0]), o2 = (t2 - a2.position.y[0]) / (a2.position.y[1] - a2.position.y[0]);
          n2.player.playSegments(a2.frames, true), a2.position.y[0] < 0 && a2.position.y[1] > 1 ? n2.player.goToAndStop(Math.floor(r2 * n2.player.totalFrames), true) : n2.player.goToAndStop(Math.ceil((r2 + o2) / 2 * n2.player.totalFrames), true);
        } else
          "loop" === a2.type ? n2.player.playSegments(a2.frames, true) : "play" === a2.type ? (true === n2.player.isPaused && n2.player.resetSegments(), n2.player.playSegments(a2.frames)) : "stop" === a2.type && (n2.player.resetSegments(true), n2.player.goToAndStop(a2.frames[0], true));
    } }), P.set(this, { writable: true, value: function() {
      var e2 = n2.getContainerVisibility(), t2 = n2.actions.find(function(t3) {
        var n3 = t3.visibility;
        return e2 >= n3[0] && e2 <= n3[1];
      });
      if (t2)
        if ("seek" === t2.type) {
          var i2 = t2.frames[0], a2 = 2 == t2.frames.length ? t2.frames[1] : n2.player.totalFrames - 1;
          null !== n2.assignedSegment && (n2.player.resetSegments(true), n2.assignedSegment = null), n2.player.goToAndStop(i2 + Math.round((e2 - t2.visibility[0]) / (t2.visibility[1] - t2.visibility[0]) * (a2 - i2)), true);
        } else if ("loop" === t2.type)
          n2.player.loop = true, (null === n2.assignedSegment || n2.assignedSegment !== t2.frames || true === n2.player.isPaused) && (n2.player.playSegments(t2.frames, true), n2.assignedSegment = t2.frames);
        else if ("play" === t2.type || "playOnce" === t2.type) {
          if ("playOnce" === t2.type && !n2.scrolledAndPlayed)
            return n2.scrolledAndPlayed = true, n2.player.resetSegments(true), void (t2.frames ? n2.player.playSegments(t2.frames, true) : n2.player.play());
          "play" === t2.type && n2.player.isPaused && (n2.player.resetSegments(true), t2.frames ? n2.player.playSegments(t2.frames, true) : n2.player.play());
        } else
          "stop" === t2.type && n2.player.goToAndStop(t2.frames[0], true);
    } }), this.enteredPlayer = H, "object" !== e(H) || "AnimationItem" !== H.constructor.name) {
      if ("string" == typeof H) {
        var W = document.querySelector(H);
        W && "LOTTIE-PLAYER" === W.nodeName && (H = W.getLottie());
      } else
        H instanceof HTMLElement && "LOTTIE-PLAYER" === H.nodeName && (H = H.getLottie());
      if (!H) {
        var F = s + "Specified player:" + H + " is invalid.";
        throw new Error(F);
      }
    }
    "string" == typeof A2 && (A2 = document.querySelector(A2)), A2 || (A2 = H.wrapper), this.player = H, this.loadedAnimation = this.player.path + this.player.fileName + ".json", this.attachedListeners = false, this.container = A2, this.mode = T, this.actions = C2, this.options = O, this.assignedSegment = null, this.scrolledAndPlayed = false, this.interactionIdx = 0, this.oldInterctionIdx = 0, this.clickCounter = 0, this.playCounter = 0, this.stateHandler = /* @__PURE__ */ new Map(), this.transitionHandler = /* @__PURE__ */ new Map();
  }
  var M2, C, A;
  return M2 = l2, (C = [{ key: "getContainerVisibility", value: function() {
    var e2 = this.container.getBoundingClientRect(), t2 = e2.top, n2 = e2.height;
    return (window.innerHeight - t2) / (window.innerHeight + n2);
  } }, { key: "getContainerCursorPosition", value: function(e2, t2) {
    var n2 = this.container.getBoundingClientRect(), i2 = n2.top;
    return { x: (e2 - n2.left) / n2.width, y: (t2 - i2) / n2.height };
  } }, { key: "initScrollMode", value: function() {
    this.player.stop(), window.addEventListener("scroll", r(this, P), true);
  } }, { key: "initCursorMode", value: function() {
    this.actions && 1 === this.actions.length ? "click" === this.actions[0].type ? (this.player.loop = false, this.player.stop(), this.container.addEventListener("click", r(this, h))) : "hover" === this.actions[0].type ? (this.player.loop = false, this.player.stop(), this.container.addEventListener("mouseenter", r(this, h)), this.container.addEventListener("touchstart", r(this, h), { passive: true })) : "toggle" === this.actions[0].type ? (this.player.loop = false, this.player.stop(), this.container.addEventListener("click", r(this, d))) : "hold" === this.actions[0].type || "pauseHold" === this.actions[0].type ? (this.container.addEventListener("mouseenter", r(this, g)), this.container.addEventListener("mouseleave", r(this, w)), this.container.addEventListener("touchstart", r(this, g), { passive: true }), this.container.addEventListener("touchend", r(this, w), { passive: true })) : "seek" === this.actions[0].type && (this.player.loop = true, this.player.stop(), this.container.addEventListener("mousemove", r(this, y)), this.container.addEventListener("touchmove", r(this, u), { passive: false }), this.container.addEventListener("mouseout", r(this, v))) : (this.player.loop = true, this.player.stop(), this.container.addEventListener("mousemove", r(this, y)), this.container.addEventListener("mouseleave", r(this, v)), r(this, S).call(this, -1, -1));
  } }, { key: "initChainMode", value: function() {
    r(this, c).call(this), this.player.loop = false, this.player.stop(), r(this, k).call(this, { ignorePath: false });
  } }, { key: "start", value: function() {
    var e2 = this;
    "scroll" === this.mode ? this.player.isLoaded ? this.initScrollMode() : this.player.addEventListener("DOMLoaded", function() {
      e2.initScrollMode();
    }) : "cursor" === this.mode ? this.player.isLoaded ? this.initCursorMode() : this.player.addEventListener("DOMLoaded", function() {
      e2.initCursorMode();
    }) : "chain" === this.mode && (this.player.isLoaded ? this.initChainMode() : this.player.addEventListener("DOMLoaded", function() {
      e2.initChainMode();
    }));
  } }, { key: "redefineOptions", value: function(t2) {
    var n2 = t2.actions, i2 = t2.container, r2 = t2.mode, o2 = t2.player, l3 = a(t2, ["actions", "container", "mode", "player"]);
    if (this.stop(), this.enteredPlayer = o2, "object" !== e(o2) || "AnimationItem" !== o2.constructor.name) {
      if ("string" == typeof o2) {
        var c2 = document.querySelector(o2);
        c2 && "LOTTIE-PLAYER" === c2.nodeName && (o2 = c2.getLottie());
      } else
        o2 instanceof HTMLElement && "LOTTIE-PLAYER" === o2.nodeName && (o2 = o2.getLottie());
      if (!o2)
        throw new Error(s + "Specified player:" + o2 + " is invalid.", o2);
    }
    "string" == typeof i2 && (i2 = document.querySelector(i2)), i2 || (i2 = o2.wrapper), this.player = o2, this.loadedAnimation = this.player.path + this.player.fileName + ".json", this.attachedListeners = false, this.container = i2, this.mode = r2, this.actions = n2, this.options = l3, this.assignedSegment = null, this.scrolledAndPlayed = false, this.interactionIdx = 0, this.clickCounter = 0, this.playCounter = 0, this.holdStatus = null, this.stateHandler = /* @__PURE__ */ new Map(), this.transitionHandler = /* @__PURE__ */ new Map(), this.start();
  } }, { key: "stop", value: function() {
    if ("scroll" === this.mode && window.removeEventListener("scroll", r(this, P), true), "cursor" === this.mode && (this.container.removeEventListener("click", r(this, h)), this.container.removeEventListener("click", r(this, d)), this.container.removeEventListener("mouseenter", r(this, h)), this.container.removeEventListener("touchstart", r(this, h)), this.container.removeEventListener("touchmove", r(this, u)), this.container.removeEventListener("mousemove", r(this, y)), this.container.removeEventListener("mouseleave", r(this, v)), this.container.removeEventListener("touchstart", r(this, g)), this.container.removeEventListener("touchend", r(this, w))), "chain" === this.mode && (this.container.removeEventListener("click", r(this, h)), this.container.removeEventListener("click", r(this, p)), this.container.removeEventListener("mouseenter", r(this, h)), this.container.removeEventListener("touchstart", r(this, h)), this.container.removeEventListener("touchmove", r(this, u)), this.container.removeEventListener("mouseenter", r(this, p)), this.container.removeEventListener("touchstart", r(this, p)), this.container.removeEventListener("mouseenter", r(this, g)), this.container.removeEventListener("touchstart", r(this, g)), this.container.removeEventListener("mouseleave", r(this, w)), this.container.removeEventListener("mousemove", r(this, y)), this.container.removeEventListener("mouseout", r(this, v)), this.container.removeEventListener("touchend", r(this, w)), this.player))
      try {
        this.player.removeEventListener("loopComplete", r(this, m)), this.player.removeEventListener("complete", r(this, m)), this.player.removeEventListener("enterFrame", r(this, L)), this.player.removeEventListener("enterFrame", r(this, E));
      } catch (e2) {
      }
    this.player && (this.player.destroy(), this.player = null);
  } }]) && n(M2.prototype, C), A && n(M2, A), l2;
}();
var c = /* @__PURE__ */ new WeakMap();
var p = /* @__PURE__ */ new WeakMap();
var d = /* @__PURE__ */ new WeakMap();
var h = /* @__PURE__ */ new WeakMap();
var y = /* @__PURE__ */ new WeakMap();
var u = /* @__PURE__ */ new WeakMap();
var v = /* @__PURE__ */ new WeakMap();
var m = /* @__PURE__ */ new WeakMap();
var f = /* @__PURE__ */ new WeakMap();
var L = /* @__PURE__ */ new WeakMap();
var E = /* @__PURE__ */ new WeakMap();
var g = /* @__PURE__ */ new WeakMap();
var w = /* @__PURE__ */ new WeakMap();
var I = /* @__PURE__ */ new WeakMap();
var x = /* @__PURE__ */ new WeakMap();
var b = /* @__PURE__ */ new WeakMap();
var k = /* @__PURE__ */ new WeakMap();
var S = /* @__PURE__ */ new WeakMap();
var P = /* @__PURE__ */ new WeakMap();
var M = function(e2) {
  var t2 = new l(e2);
  return t2.start(), t2;
};
var lottie_interactivity_es_default = M;
export {
  l as LottieInteractivity,
  M as create,
  lottie_interactivity_es_default as default
};
//# sourceMappingURL=@lottiefiles_lottie-interactivity.js.map
